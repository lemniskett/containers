map_hash_bucket_size 128;

map $http_upgrade $connection_upgrade {
  default upgrade;
  ''      close;
}

# ActivityPub routing.
map $http_accept $activitypub_location {
  default @soapbox;
  "application/activity+json" @mastodon;
  'application/ld+json; profile="https://www.w3.org/ns/activitystreams"' @mastodon;
}

upstream backend {
  server localhost:3000 fail_timeout=0;
}

upstream streaming {
  server streaming:4000 fail_timeout=0;
}

proxy_cache_path /tmp/nginx/cache levels=1:2 keys_zone=CACHE:10m inactive=7d max_size=1g;

server {
  listen 8080 default_server;
  listen [::]:8080 default_server;
  server_name _;

  keepalive_timeout    70;
  sendfile             on;
  client_max_body_size 80m;

  root /opt/soapbox/static;

  add_header Strict-Transport-Security "max-age=31536000" always;

  # Content Security Policy (CSP)
  # https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy
  add_header Content-Security-Policy "base-uri 'none'; default-src 'none'; font-src 'self'; img-src 'self' https: data: blob:; style-src 'self' 'unsafe-inline'; media-src 'self' https: data:; frame-src 'self' https:; manifest-src 'self'; connect-src 'self' data: blob:; script-src 'self'; child-src 'self'; worker-src 'self';";

  # Fallback route.
  # Try static files, then fall back to the SPA.
  location / {
    try_files /dev/null @static-files;
  }

  # Mastodon backend routes.
  # These are routes to Mastodon's API and important rendered pages.
  location ~ ^/(api|oauth|auth|admin|pghero|sidekiq|manifest.json|media|nodeinfo|unsubscribe|.well-known/(webfinger|host-meta|nodeinfo|change-password)|@(.+)/embed$) {
    try_files /dev/null @mastodon;
  }

  # Mastodon ActivityPub routes.
  # Conditionally send to Mastodon by Accept header.
  location ~ ^/(inbox|users|@(.+)) {
    try_files /dev/null $activitypub_location;
  }

  # Soapbox & Mastodon (frontend) build files.
  # New builds produce hashed filenames, so these should be cached heavily.
  location /packs {
    add_header Cache-Control "public, max-age=31536000, immutable";
    add_header Strict-Transport-Security "max-age=31536000" always;
    try_files $uri @mastodon-packs;
  }

  # Soapbox configuration files.
  # Enable CORS so we can fetch them.
  location /instance {
    add_header Access-Control-Allow-Origin "*";

    if ($request_method = 'OPTIONS') {
      add_header Access-Control-Allow-Origin "*";
      return 204;
    }
  }

  # Soapbox ServiceWorker.
  location = /sw.js {
    add_header Cache-Control "public, max-age=0";
    add_header Strict-Transport-Security "max-age=31536000" always;
  }

  # Soapbox SPA (Single Page App).
  location @soapbox {
    try_files /index.html /dev/null;
  }

  # Mastodon public files (fallback to Soapbox SPA).
  # https://github.com/mastodon/mastodon/tree/main/public
  location @mastodon-public {
    root /home/mastodon/live/public;
    try_files $uri @soapbox;
  }

  # Like Mastodon public, without fallback to SPA.
  location @mastodon-packs {
    root /home/mastodon/live/public;
  }

  # Soapbox & Mastodon static files.
  # Try Soapbox first, Mastodon, then fall back to the SPA.
  location @static-files {
    try_files $uri @mastodon-public;
  }

  # Proxy to Mastodon's Ruby on Rails backend.
  location @mastodon {
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header Proxy "";
    proxy_pass_header Server;

    proxy_pass http://backend;
    proxy_buffering on;
    proxy_redirect off;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;

    proxy_cache CACHE;
    proxy_cache_valid 200 7d;
    proxy_cache_valid 410 24h;
    proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
    add_header X-Cached $upstream_cache_status;
    add_header Strict-Transport-Security "max-age=31536000" always;

    tcp_nodelay on;
  }

  # Mastodon's Node.js streaming server.
  location ^~ /api/v1/streaming {
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header Proxy "";

    proxy_pass http://streaming;
    proxy_buffering off;
    proxy_redirect off;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;

    tcp_nodelay on;
  }

  error_page 500 501 502 503 504 /500.html;
}